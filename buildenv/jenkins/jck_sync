#!groovy

timestamps{
    stage('Setup') {
            if (params.LABEL !="") {
                LABEL = params.LABEL
            } else {
                LABEL = "ci.role.test&&hw.arch.x86&&sw.os.linux"
            }
            node(LABEL) {
                println "LABEL: ${LABEL}"
                echo "clone the SCM GIT repo"
                try {
                    def gitConfig = scm.getUserRemoteConfigs().get(0)
                    checkout scm: [$class: 'GitSCM',
                    branches: [[name: "${scm.branches[0].name}"]],
                    extensions: [
                        [$class: 'CleanBeforeCheckout'],
                        [$class: 'CloneOption'],
                        [$class: 'RelativeTargetDirectory', relativeTargetDir: 'aqa-tests']],
                    userRemoteConfigs: [[url: "${gitConfig.getUrl()}"]]
                    ]

                    syncJckMaterial()

                    } catch (Exception e) {
                        println("Exception: " + e.toString())
                        // build result may not be updated correctly at the moment (see https://issues.jenkins.io/browse/JENKINS-56402)
                        // if there is an exception, set currentBuild.result to ABORTED/FAILURE
                        if (e.toString().contains("FlowInterruptedException")) {
                            currentBuild.result = 'ABORTED'
                        } else {
                            currentBuild.result = 'FAILURE'
                        }

                    }
                }
    }
}

def syncJckMaterial(){
        echo "Starting script to sync JCK materials ....."
        def JCK_VERSION = params.JDK_VERSION ? "-j ${params.JDK_VERSION}": ""
        def JCK_GIT_BRANCH = params.JCK_GIT_BRANCH ? "-gb ${params.JCK_GIT_BRANCH}": ""
        def ARTIFACTORY_URL = params.ARTIFACTORY_URL ? "-au ${params.ARTIFACTORY_URL}": ""
        def JCK_GIT_REPO = params.JCK_GIT_REPO ? "-repo ${params.JCK_GIT_REPO}": ""
        stage('JCKUpdater') {
                script {
                        getJavaSDK()

                        withCredentials([
                            usernamePassword(credentialsId: "${params.ARTIFACTORY_CREDENTIALS}",
						usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_CREDENTIALS'),
                            string(credentialsId: "${params.GIT_CREDENTIALS}",variable: 'GIT_CREDENTIALS')
                        ]) {
                                def currentDirectory = sh(script: 'pwd', returnStdout: true).trim()
                                dir("${currentDirectory}/aqa-tests/jck/jck-semiauto-updater") {
                                    sshagent(credentials:["${params.USER_CREDENTIALS_ID}"], ignoreMissing: true){
                                        def SCRIPT = "./jckupdater.sh ${JCK_VERSION} -at ${ARTIFACTORY_CREDENTIALS} ${JCK_GIT_REPO}  -gt ${GIT_CREDENTIALS}  ${ARTIFACTORY_URL}  ${JCK_GIT_BRANCH}"
                                        echo "${SCRIPT}"
                                        def EXITCODE = sh(script: "${SCRIPT}", returnStatus: true)
                                        echo "EXITCODE= ${EXITCODE}"
                                        if (EXITCODE == 2) {
                                            echo "Script returned exit code 2, No new update available. Marking the job as SUCCESS. "
                                        } else if (EXITCODE == 0) {
                                            echo "Script returned exit code 0, new update is available and PR is created."
                                        } else {
                                            error("script failed with exit code ${EXITCODE}")
                                        }
                                    }
                                }
                        }
                    }
                }
    }

//Download JAVA SDK 
def getJavaSDK(){

        JDK_VERSION_OPTION = params.JDK_VERSION ? "-j ${params.JDK_VERSION}" : ""
        JDK_IMPL_OPTION = params.JDK_IMPL ? "-i ${params.JDK_IMPL}" : ""
        CUSTOMIZED_SDK_URL_OPTION = "-c ${params.CUSTOMIZED_SDK_URL}"
        CLONE_OPENJ9_OPTION = (params.CLONE_OPENJ9) ? "--clone_openj9 ${params.CLONE_OPENJ9}" : ""

        GET_SH_CMD = "./get.sh -s `pwd`/.. -p $PLATFORM -r ${SDK_RESOURCE} ${JDK_VERSION_OPTION} ${JDK_IMPL_OPTION} ${CUSTOMIZED_SDK_URL_OPTION} ${CLONE_OPENJ9_OPTION}"
        dir("${WORKSPACE}/aqa-tests") {
            if (params.CUSTOMIZED_SDK_URL_CREDENTIAL_ID) {
			withCredentials([usernamePassword(credentialsId: "${params.CUSTOMIZED_SDK_URL_CREDENTIAL_ID}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
				sh "$GET_SH_CMD"
			    }
		    } else {
			    sh "$GET_SH_CMD"
		    }
        }
    }
